<div class="notebook">

<div class="nb-cell program" name="p1">
command(X, Stack, [N|Stack]) :- num(X, N).

command(drop, [_|T], T).
command(dup, [H|T], [H, H | T]).
command(swap, [A, B | T], [B, A | T]).
command(add, [A, B | T], [C | T]) :- num_add(0, A, B, C).

forth([], Stack, Stack).
forth([Op|Cont], Input, Output) :-
    forth(Cont, Stack, Output),
    command(Op, Input, Stack).

run(Program, Result) :- forth(Program, [], Result).

num(0, []).
num(1, [1]).

bit_add(0, 0, 0, 0, 0).
bit_add(0, 0, 1, 1, 0).
bit_add(0, 1, 0, 1, 0).
bit_add(0, 1, 1, 0, 1).
bit_add(1, 0, 0, 1, 0).
bit_add(1, 0, 1, 0, 1).
bit_add(1, 1, 0, 0, 1).
bit_add(1, 1, 1, 1, 1).

num_add(0, [], [], []).
num_add(1, [], [], [1]).
num_add(Carry, [A|TA], [], [C|TC]) :- 
    bit_add(Carry, A, 0, C, NextCarry),
    num_add(NextCarry, TA, [], TC).
num_add(Carry, [], [B|TB], [C|TC]) :- 
    bit_add(Carry, 0, B, C, NextCarry),
    num_add(NextCarry, [], TB, TC).
num_add(Carry, [A|TA], [B|TB], [C|TC]) :-
    bit_add(Carry, A, B, C, NextCarry),
    num_add(NextCarry, TA, TB, TC).
</div>

<div class="nb-cell query" name="q1">
run([0, 0, add], X).
</div>

<div class="nb-cell query" name="q2">
forth([add], [[1], [1]], C)
</div>

</div>
